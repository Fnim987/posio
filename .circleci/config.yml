version: 2.1

orbs: 
  aws-cli: circleci/aws-cli@3.1.3

executors:
  docker-publisher:
    environment:
      IMAGE_TAG: fnim987/posio:v1.1.1
    docker:
      - image: docker:stable
      
commands:
            
  rollback:
    description: rollback after failed deployment
    steps:
      - add_ssh_keys:
          fingerprints: ["c2:35:78:49:b6:bb:99:b2:2f:b1:88:34:c6:1b:6b:ca"]
      - attach_workspace:
          at: ~/
      - run:
          name: dependencies
          when: on_fail
          command: |
            apk add --update ansible
            echo [web] > ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=Capstone" \
            --output text >> ansible/inventory.txt
            cat ansible/inventory.txt
            cd ansible
            ansible-playbook -i inventory.txt rollback.yml

jobs:
  lint:
    docker:
    - image: python:3.7.3-stretch
    resource_class: medium

    working_directory: ~/repo

    steps:
    - checkout
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "requirements.txt" }}
        - v1-dependencies-
    - run:
        name: install dependencies
        command: |
          python3 -m venv venv
          . venv/bin/activate
          make install
          wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.10.0/hadolint-Linux-x86_64 &&\
          chmod +x /bin/hadolint
    - save_cache:
        paths:
        - ./venv
        key: v1-dependencies-{{ checksum "requirements.txt" }}
    - run:
        name: run lint
        command: |
          . venv/bin/activate
          make lint 
          
  build_and_upload_docker:
    executor: docker-publisher
    steps:
    - checkout
    - setup_remote_docker:
        version: 20.10.2
    - run:
        name: build docker
        command: |
          echo "${DOCKERHUB_PASS}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
          docker build --tag "${IMAGE_TAG}" .
          docker push "${IMAGE_TAG}"
            
  deploy-infrastructure:
    docker:
    -  image: amazon/aws-cli
    resource_class: medium
    steps:
      - checkout
      - run:
          name: tar
          command: |
            yum -y install tar gzip
      - run:
          name: deploy back-end infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/EC2.yml \
              --stack-name Capstone \
              --tags project=Capstone
      - run:
          name: Add EC2 ip to ansible inventory
          command: |
            echo [web] > ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=Capstone" \
            --output text >> ansible/inventory.txt
            cat ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/ansible/inventory.txt

  configure-infrastructure:
    docker:
    - image: alpine:latest
    resource_class: medium
    steps:
      - checkout
      - aws-cli/setup      
      - add_ssh_keys:
          fingerprints: ["c2:35:78:49:b6:bb:99:b2:2f:b1:88:34:c6:1b:6b:ca"]
      - attach_workspace:
          at: ~/
      - run:
          name: dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd ansible
            ansible-playbook -i inventory.txt install.yml
      
  deploy-app:
    docker:
    - image: alpine:latest
    resource_class: medium
    steps:
      - checkout
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints: ["c2:35:78:49:b6:bb:99:b2:2f:b1:88:34:c6:1b:6b:ca"]
      - attach_workspace:
          at: ~/
      - run:
          name: dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy App
          command: |
            cd ansible
            ansible-playbook -i inventory.txt deploy.yml
      
  smoke-test:
    docker:
    - image: alpine:latest
    resource_class: medium
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Smoketest
          command: |
            export IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name, Values=Capstone" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${IP}:8000"
            echo ${API_URL}
            if curl -ks ${API_URL} | grep "Posio"
              then
                return 0
              else
                return 1
              fi
      #- rollback


workflows:
  version: 2
  posio:
    jobs:
      - lint
      - build_and_upload_docker:
          requires: [lint]
      - deploy-infrastructure:
          requires: [build_and_upload_docker]
      - configure-infrastructure:
         requires: [deploy-infrastructure]
      - deploy-app:
          requires: [configure-infrastructure]
      - smoke-test:
          requires: [deploy-app]